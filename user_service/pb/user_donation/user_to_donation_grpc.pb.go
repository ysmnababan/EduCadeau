// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/user_to_donation.proto

package user_donation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserDonation_GetUsername_FullMethodName = "/user.UserDonation/GetUsername"
)

// UserDonationClient is the client API for UserDonation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDonationClient interface {
	GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*UsernameResp, error)
}

type userDonationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDonationClient(cc grpc.ClientConnInterface) UserDonationClient {
	return &userDonationClient{cc}
}

func (c *userDonationClient) GetUsername(ctx context.Context, in *GetUsernameReq, opts ...grpc.CallOption) (*UsernameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsernameResp)
	err := c.cc.Invoke(ctx, UserDonation_GetUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDonationServer is the server API for UserDonation service.
// All implementations should embed UnimplementedUserDonationServer
// for forward compatibility
type UserDonationServer interface {
	GetUsername(context.Context, *GetUsernameReq) (*UsernameResp, error)
}

// UnimplementedUserDonationServer should be embedded to have forward compatible implementations.
type UnimplementedUserDonationServer struct {
}

func (UnimplementedUserDonationServer) GetUsername(context.Context, *GetUsernameReq) (*UsernameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsername not implemented")
}

// UnsafeUserDonationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDonationServer will
// result in compilation errors.
type UnsafeUserDonationServer interface {
	mustEmbedUnimplementedUserDonationServer()
}

func RegisterUserDonationServer(s grpc.ServiceRegistrar, srv UserDonationServer) {
	s.RegisterService(&UserDonation_ServiceDesc, srv)
}

func _UserDonation_GetUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsernameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDonationServer).GetUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDonation_GetUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDonationServer).GetUsername(ctx, req.(*GetUsernameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDonation_ServiceDesc is the grpc.ServiceDesc for UserDonation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDonation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserDonation",
	HandlerType: (*UserDonationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsername",
			Handler:    _UserDonation_GetUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_to_donation.proto",
}
