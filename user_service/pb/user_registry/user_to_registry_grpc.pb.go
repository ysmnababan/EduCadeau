// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/user_to_registry.proto

package user_registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserRegistry_GetBalance_FullMethodName = "/user.UserRegistry/GetBalance"
)

// UserRegistryClient is the client API for UserRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegistryClient interface {
	GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error)
}

type userRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegistryClient(cc grpc.ClientConnInterface) UserRegistryClient {
	return &userRegistryClient{cc}
}

func (c *userRegistryClient) GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResp)
	err := c.cc.Invoke(ctx, UserRegistry_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegistryServer is the server API for UserRegistry service.
// All implementations should embed UnimplementedUserRegistryServer
// for forward compatibility
type UserRegistryServer interface {
	GetBalance(context.Context, *BalanceReq) (*BalanceResp, error)
}

// UnimplementedUserRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedUserRegistryServer struct {
}

func (UnimplementedUserRegistryServer) GetBalance(context.Context, *BalanceReq) (*BalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}

// UnsafeUserRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegistryServer will
// result in compilation errors.
type UnsafeUserRegistryServer interface {
	mustEmbedUnimplementedUserRegistryServer()
}

func RegisterUserRegistryServer(s grpc.ServiceRegistrar, srv UserRegistryServer) {
	s.RegisterService(&UserRegistry_ServiceDesc, srv)
}

func _UserRegistry_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegistryServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserRegistry_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegistryServer).GetBalance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegistry_ServiceDesc is the grpc.ServiceDesc for UserRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserRegistry",
	HandlerType: (*UserRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _UserRegistry_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_to_registry.proto",
}
