// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/donation_rest.proto

package donation_rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DonationRest_GetAllDonations_FullMethodName   = "/donation.DonationRest/GetAllDonations"
	DonationRest_GetDonationDetail_FullMethodName = "/donation.DonationRest/GetDonationDetail"
	DonationRest_CreateDonation_FullMethodName    = "/donation.DonationRest/CreateDonation"
	DonationRest_EditDonation_FullMethodName      = "/donation.DonationRest/EditDonation"
	DonationRest_DeleteDonation_FullMethodName    = "/donation.DonationRest/DeleteDonation"
)

// DonationRestClient is the client API for DonationRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonationRestClient interface {
	GetAllDonations(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonationList, error)
	GetDonationDetail(ctx context.Context, in *DonationDetailReq, opts ...grpc.CallOption) (*DonationDetailResp, error)
	CreateDonation(ctx context.Context, in *CreateDonationReq, opts ...grpc.CallOption) (*CreateResp, error)
	EditDonation(ctx context.Context, in *EditDonationReq, opts ...grpc.CallOption) (*EditResp, error)
	DeleteDonation(ctx context.Context, in *DeleteDonationReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type donationRestClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationRestClient(cc grpc.ClientConnInterface) DonationRestClient {
	return &donationRestClient{cc}
}

func (c *donationRestClient) GetAllDonations(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationList)
	err := c.cc.Invoke(ctx, DonationRest_GetAllDonations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationRestClient) GetDonationDetail(ctx context.Context, in *DonationDetailReq, opts ...grpc.CallOption) (*DonationDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationDetailResp)
	err := c.cc.Invoke(ctx, DonationRest_GetDonationDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationRestClient) CreateDonation(ctx context.Context, in *CreateDonationReq, opts ...grpc.CallOption) (*CreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, DonationRest_CreateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationRestClient) EditDonation(ctx context.Context, in *EditDonationReq, opts ...grpc.CallOption) (*EditResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditResp)
	err := c.cc.Invoke(ctx, DonationRest_EditDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationRestClient) DeleteDonation(ctx context.Context, in *DeleteDonationReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, DonationRest_DeleteDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationRestServer is the server API for DonationRest service.
// All implementations should embed UnimplementedDonationRestServer
// for forward compatibility
type DonationRestServer interface {
	GetAllDonations(context.Context, *DonationReq) (*DonationList, error)
	GetDonationDetail(context.Context, *DonationDetailReq) (*DonationDetailResp, error)
	CreateDonation(context.Context, *CreateDonationReq) (*CreateResp, error)
	EditDonation(context.Context, *EditDonationReq) (*EditResp, error)
	DeleteDonation(context.Context, *DeleteDonationReq) (*DeleteResp, error)
}

// UnimplementedDonationRestServer should be embedded to have forward compatible implementations.
type UnimplementedDonationRestServer struct {
}

func (UnimplementedDonationRestServer) GetAllDonations(context.Context, *DonationReq) (*DonationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDonations not implemented")
}
func (UnimplementedDonationRestServer) GetDonationDetail(context.Context, *DonationDetailReq) (*DonationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationDetail not implemented")
}
func (UnimplementedDonationRestServer) CreateDonation(context.Context, *CreateDonationReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonation not implemented")
}
func (UnimplementedDonationRestServer) EditDonation(context.Context, *EditDonationReq) (*EditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDonation not implemented")
}
func (UnimplementedDonationRestServer) DeleteDonation(context.Context, *DeleteDonationReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDonation not implemented")
}

// UnsafeDonationRestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationRestServer will
// result in compilation errors.
type UnsafeDonationRestServer interface {
	mustEmbedUnimplementedDonationRestServer()
}

func RegisterDonationRestServer(s grpc.ServiceRegistrar, srv DonationRestServer) {
	s.RegisterService(&DonationRest_ServiceDesc, srv)
}

func _DonationRest_GetAllDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationRestServer).GetAllDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationRest_GetAllDonations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationRestServer).GetAllDonations(ctx, req.(*DonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationRest_GetDonationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationRestServer).GetDonationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationRest_GetDonationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationRestServer).GetDonationDetail(ctx, req.(*DonationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationRest_CreateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationRestServer).CreateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationRest_CreateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationRestServer).CreateDonation(ctx, req.(*CreateDonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationRest_EditDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationRestServer).EditDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationRest_EditDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationRestServer).EditDonation(ctx, req.(*EditDonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationRest_DeleteDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationRestServer).DeleteDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationRest_DeleteDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationRestServer).DeleteDonation(ctx, req.(*DeleteDonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DonationRest_ServiceDesc is the grpc.ServiceDesc for DonationRest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonationRest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.DonationRest",
	HandlerType: (*DonationRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDonations",
			Handler:    _DonationRest_GetAllDonations_Handler,
		},
		{
			MethodName: "GetDonationDetail",
			Handler:    _DonationRest_GetDonationDetail_Handler,
		},
		{
			MethodName: "CreateDonation",
			Handler:    _DonationRest_CreateDonation_Handler,
		},
		{
			MethodName: "EditDonation",
			Handler:    _DonationRest_EditDonation_Handler,
		},
		{
			MethodName: "DeleteDonation",
			Handler:    _DonationRest_DeleteDonation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/donation_rest.proto",
}
