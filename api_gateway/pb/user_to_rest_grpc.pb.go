// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/user_to_rest.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserToRest_Register_FullMethodName      = "/user.UserToRest/Register"
	UserToRest_Login_FullMethodName         = "/user.UserToRest/Login"
	UserToRest_GetAllUser_FullMethodName    = "/user.UserToRest/GetAllUser"
	UserToRest_GetUserDetail_FullMethodName = "/user.UserToRest/GetUserDetail"
	UserToRest_TopUp_FullMethodName         = "/user.UserToRest/TopUp"
	UserToRest_EditDataUser_FullMethodName  = "/user.UserToRest/EditDataUser"
)

// UserToRestClient is the client API for UserToRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserToRestClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	GetAllUser(ctx context.Context, in *Req, opts ...grpc.CallOption) (*GetAllResp, error)
	GetUserDetail(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*UserDetailResp, error)
	TopUp(ctx context.Context, in *TopUpReq, opts ...grpc.CallOption) (*TopUpResp, error)
	EditDataUser(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditResp, error)
}

type userToRestClient struct {
	cc grpc.ClientConnInterface
}

func NewUserToRestClient(cc grpc.ClientConnInterface) UserToRestClient {
	return &userToRestClient{cc}
}

func (c *userToRestClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, UserToRest_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userToRestClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, UserToRest_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userToRestClient) GetAllUser(ctx context.Context, in *Req, opts ...grpc.CallOption) (*GetAllResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResp)
	err := c.cc.Invoke(ctx, UserToRest_GetAllUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userToRestClient) GetUserDetail(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*UserDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetailResp)
	err := c.cc.Invoke(ctx, UserToRest_GetUserDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userToRestClient) TopUp(ctx context.Context, in *TopUpReq, opts ...grpc.CallOption) (*TopUpResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUpResp)
	err := c.cc.Invoke(ctx, UserToRest_TopUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userToRestClient) EditDataUser(ctx context.Context, in *EditReq, opts ...grpc.CallOption) (*EditResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditResp)
	err := c.cc.Invoke(ctx, UserToRest_EditDataUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserToRestServer is the server API for UserToRest service.
// All implementations should embed UnimplementedUserToRestServer
// for forward compatibility
type UserToRestServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	GetAllUser(context.Context, *Req) (*GetAllResp, error)
	GetUserDetail(context.Context, *DetailReq) (*UserDetailResp, error)
	TopUp(context.Context, *TopUpReq) (*TopUpResp, error)
	EditDataUser(context.Context, *EditReq) (*EditResp, error)
}

// UnimplementedUserToRestServer should be embedded to have forward compatible implementations.
type UnimplementedUserToRestServer struct {
}

func (UnimplementedUserToRestServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserToRestServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserToRestServer) GetAllUser(context.Context, *Req) (*GetAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedUserToRestServer) GetUserDetail(context.Context, *DetailReq) (*UserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedUserToRestServer) TopUp(context.Context, *TopUpReq) (*TopUpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (UnimplementedUserToRestServer) EditDataUser(context.Context, *EditReq) (*EditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDataUser not implemented")
}

// UnsafeUserToRestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserToRestServer will
// result in compilation errors.
type UnsafeUserToRestServer interface {
	mustEmbedUnimplementedUserToRestServer()
}

func RegisterUserToRestServer(s grpc.ServiceRegistrar, srv UserToRestServer) {
	s.RegisterService(&UserToRest_ServiceDesc, srv)
}

func _UserToRest_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserToRest_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserToRest_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_GetAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).GetAllUser(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserToRest_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_GetUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).GetUserDetail(ctx, req.(*DetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserToRest_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_TopUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).TopUp(ctx, req.(*TopUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserToRest_EditDataUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserToRestServer).EditDataUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserToRest_EditDataUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserToRestServer).EditDataUser(ctx, req.(*EditReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserToRest_ServiceDesc is the grpc.ServiceDesc for UserToRest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserToRest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserToRest",
	HandlerType: (*UserToRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserToRest_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserToRest_Login_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _UserToRest_GetAllUser_Handler,
		},
		{
			MethodName: "GetUserDetail",
			Handler:    _UserToRest_GetUserDetail_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _UserToRest_TopUp_Handler,
		},
		{
			MethodName: "EditDataUser",
			Handler:    _UserToRest_EditDataUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_to_rest.proto",
}
