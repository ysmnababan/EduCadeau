// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/registry_rest.proto

package pbRegistryRest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RegistryRest_GetAllRegistries_FullMethodName = "/registry.RegistryRest/GetAllRegistries"
	RegistryRest_GetRegistryID_FullMethodName    = "/registry.RegistryRest/GetRegistryID"
	RegistryRest_Donate_FullMethodName           = "/registry.RegistryRest/Donate"
	RegistryRest_DeleteRegistry_FullMethodName   = "/registry.RegistryRest/DeleteRegistry"
	RegistryRest_GetAllPayments_FullMethodName   = "/registry.RegistryRest/GetAllPayments"
	RegistryRest_GetPayment_FullMethodName       = "/registry.RegistryRest/GetPayment"
	RegistryRest_Pay_FullMethodName              = "/registry.RegistryRest/Pay"
)

// RegistryRestClient is the client API for RegistryRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryRestClient interface {
	GetAllRegistries(ctx context.Context, in *AllReq, opts ...grpc.CallOption) (*RegistriesResp, error)
	GetRegistryID(ctx context.Context, in *GetRegistryReq, opts ...grpc.CallOption) (*DetailRegistryResp, error)
	Donate(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonateResp, error)
	DeleteRegistry(ctx context.Context, in *DeleteRegistryReq, opts ...grpc.CallOption) (*DeleteResp, error)
	GetAllPayments(ctx context.Context, in *PaymentsReq, opts ...grpc.CallOption) (*PaymentList, error)
	GetPayment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error)
	Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PaymentResp, error)
}

type registryRestClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryRestClient(cc grpc.ClientConnInterface) RegistryRestClient {
	return &registryRestClient{cc}
}

func (c *registryRestClient) GetAllRegistries(ctx context.Context, in *AllReq, opts ...grpc.CallOption) (*RegistriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistriesResp)
	err := c.cc.Invoke(ctx, RegistryRest_GetAllRegistries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) GetRegistryID(ctx context.Context, in *GetRegistryReq, opts ...grpc.CallOption) (*DetailRegistryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailRegistryResp)
	err := c.cc.Invoke(ctx, RegistryRest_GetRegistryID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) Donate(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonateResp)
	err := c.cc.Invoke(ctx, RegistryRest_Donate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) DeleteRegistry(ctx context.Context, in *DeleteRegistryReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, RegistryRest_DeleteRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) GetAllPayments(ctx context.Context, in *PaymentsReq, opts ...grpc.CallOption) (*PaymentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentList)
	err := c.cc.Invoke(ctx, RegistryRest_GetAllPayments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) GetPayment(ctx context.Context, in *PaymentReq, opts ...grpc.CallOption) (*PaymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResp)
	err := c.cc.Invoke(ctx, RegistryRest_GetPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryRestClient) Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PaymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResp)
	err := c.cc.Invoke(ctx, RegistryRest_Pay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryRestServer is the server API for RegistryRest service.
// All implementations should embed UnimplementedRegistryRestServer
// for forward compatibility
type RegistryRestServer interface {
	GetAllRegistries(context.Context, *AllReq) (*RegistriesResp, error)
	GetRegistryID(context.Context, *GetRegistryReq) (*DetailRegistryResp, error)
	Donate(context.Context, *DonationReq) (*DonateResp, error)
	DeleteRegistry(context.Context, *DeleteRegistryReq) (*DeleteResp, error)
	GetAllPayments(context.Context, *PaymentsReq) (*PaymentList, error)
	GetPayment(context.Context, *PaymentReq) (*PaymentResp, error)
	Pay(context.Context, *PayReq) (*PaymentResp, error)
}

// UnimplementedRegistryRestServer should be embedded to have forward compatible implementations.
type UnimplementedRegistryRestServer struct {
}

func (UnimplementedRegistryRestServer) GetAllRegistries(context.Context, *AllReq) (*RegistriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRegistries not implemented")
}
func (UnimplementedRegistryRestServer) GetRegistryID(context.Context, *GetRegistryReq) (*DetailRegistryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryID not implemented")
}
func (UnimplementedRegistryRestServer) Donate(context.Context, *DonationReq) (*DonateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Donate not implemented")
}
func (UnimplementedRegistryRestServer) DeleteRegistry(context.Context, *DeleteRegistryReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistry not implemented")
}
func (UnimplementedRegistryRestServer) GetAllPayments(context.Context, *PaymentsReq) (*PaymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPayments not implemented")
}
func (UnimplementedRegistryRestServer) GetPayment(context.Context, *PaymentReq) (*PaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedRegistryRestServer) Pay(context.Context, *PayReq) (*PaymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}

// UnsafeRegistryRestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryRestServer will
// result in compilation errors.
type UnsafeRegistryRestServer interface {
	mustEmbedUnimplementedRegistryRestServer()
}

func RegisterRegistryRestServer(s grpc.ServiceRegistrar, srv RegistryRestServer) {
	s.RegisterService(&RegistryRest_ServiceDesc, srv)
}

func _RegistryRest_GetAllRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).GetAllRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_GetAllRegistries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).GetAllRegistries(ctx, req.(*AllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_GetRegistryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).GetRegistryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_GetRegistryID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).GetRegistryID(ctx, req.(*GetRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_Donate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).Donate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_Donate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).Donate(ctx, req.(*DonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_DeleteRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).DeleteRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_DeleteRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).DeleteRegistry(ctx, req.(*DeleteRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_GetAllPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).GetAllPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_GetAllPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).GetAllPayments(ctx, req.(*PaymentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).GetPayment(ctx, req.(*PaymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryRest_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryRestServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryRest_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryRestServer).Pay(ctx, req.(*PayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryRest_ServiceDesc is the grpc.ServiceDesc for RegistryRest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryRest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.RegistryRest",
	HandlerType: (*RegistryRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRegistries",
			Handler:    _RegistryRest_GetAllRegistries_Handler,
		},
		{
			MethodName: "GetRegistryID",
			Handler:    _RegistryRest_GetRegistryID_Handler,
		},
		{
			MethodName: "Donate",
			Handler:    _RegistryRest_Donate_Handler,
		},
		{
			MethodName: "DeleteRegistry",
			Handler:    _RegistryRest_DeleteRegistry_Handler,
		},
		{
			MethodName: "GetAllPayments",
			Handler:    _RegistryRest_GetAllPayments_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _RegistryRest_GetPayment_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _RegistryRest_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/registry_rest.proto",
}
