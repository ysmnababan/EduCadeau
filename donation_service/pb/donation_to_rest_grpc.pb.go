// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/donation_to_rest.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DonationToRest_GetAllDonations_FullMethodName   = "/donation.DonationToRest/GetAllDonations"
	DonationToRest_GetDonationDetail_FullMethodName = "/donation.DonationToRest/GetDonationDetail"
	DonationToRest_CreateDonation_FullMethodName    = "/donation.DonationToRest/CreateDonation"
	DonationToRest_EditDonation_FullMethodName      = "/donation.DonationToRest/EditDonation"
)

// DonationToRestClient is the client API for DonationToRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonationToRestClient interface {
	GetAllDonations(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonationList, error)
	GetDonationDetail(ctx context.Context, in *DonationDetailReq, opts ...grpc.CallOption) (*DonationDetailResp, error)
	CreateDonation(ctx context.Context, in *CreateDonationReq, opts ...grpc.CallOption) (*CreateResp, error)
	EditDonation(ctx context.Context, in *EditDonationReq, opts ...grpc.CallOption) (*EditResp, error)
}

type donationToRestClient struct {
	cc grpc.ClientConnInterface
}

func NewDonationToRestClient(cc grpc.ClientConnInterface) DonationToRestClient {
	return &donationToRestClient{cc}
}

func (c *donationToRestClient) GetAllDonations(ctx context.Context, in *DonationReq, opts ...grpc.CallOption) (*DonationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationList)
	err := c.cc.Invoke(ctx, DonationToRest_GetAllDonations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationToRestClient) GetDonationDetail(ctx context.Context, in *DonationDetailReq, opts ...grpc.CallOption) (*DonationDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonationDetailResp)
	err := c.cc.Invoke(ctx, DonationToRest_GetDonationDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationToRestClient) CreateDonation(ctx context.Context, in *CreateDonationReq, opts ...grpc.CallOption) (*CreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, DonationToRest_CreateDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donationToRestClient) EditDonation(ctx context.Context, in *EditDonationReq, opts ...grpc.CallOption) (*EditResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditResp)
	err := c.cc.Invoke(ctx, DonationToRest_EditDonation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonationToRestServer is the server API for DonationToRest service.
// All implementations should embed UnimplementedDonationToRestServer
// for forward compatibility
type DonationToRestServer interface {
	GetAllDonations(context.Context, *DonationReq) (*DonationList, error)
	GetDonationDetail(context.Context, *DonationDetailReq) (*DonationDetailResp, error)
	CreateDonation(context.Context, *CreateDonationReq) (*CreateResp, error)
	EditDonation(context.Context, *EditDonationReq) (*EditResp, error)
}

// UnimplementedDonationToRestServer should be embedded to have forward compatible implementations.
type UnimplementedDonationToRestServer struct {
}

func (UnimplementedDonationToRestServer) GetAllDonations(context.Context, *DonationReq) (*DonationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDonations not implemented")
}
func (UnimplementedDonationToRestServer) GetDonationDetail(context.Context, *DonationDetailReq) (*DonationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonationDetail not implemented")
}
func (UnimplementedDonationToRestServer) CreateDonation(context.Context, *CreateDonationReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonation not implemented")
}
func (UnimplementedDonationToRestServer) EditDonation(context.Context, *EditDonationReq) (*EditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDonation not implemented")
}

// UnsafeDonationToRestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonationToRestServer will
// result in compilation errors.
type UnsafeDonationToRestServer interface {
	mustEmbedUnimplementedDonationToRestServer()
}

func RegisterDonationToRestServer(s grpc.ServiceRegistrar, srv DonationToRestServer) {
	s.RegisterService(&DonationToRest_ServiceDesc, srv)
}

func _DonationToRest_GetAllDonations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationToRestServer).GetAllDonations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationToRest_GetAllDonations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationToRestServer).GetAllDonations(ctx, req.(*DonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationToRest_GetDonationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DonationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationToRestServer).GetDonationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationToRest_GetDonationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationToRestServer).GetDonationDetail(ctx, req.(*DonationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationToRest_CreateDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationToRestServer).CreateDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationToRest_CreateDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationToRestServer).CreateDonation(ctx, req.(*CreateDonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonationToRest_EditDonation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDonationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonationToRestServer).EditDonation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DonationToRest_EditDonation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonationToRestServer).EditDonation(ctx, req.(*EditDonationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DonationToRest_ServiceDesc is the grpc.ServiceDesc for DonationToRest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonationToRest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "donation.DonationToRest",
	HandlerType: (*DonationToRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDonations",
			Handler:    _DonationToRest_GetAllDonations_Handler,
		},
		{
			MethodName: "GetDonationDetail",
			Handler:    _DonationToRest_GetDonationDetail_Handler,
		},
		{
			MethodName: "CreateDonation",
			Handler:    _DonationToRest_CreateDonation_Handler,
		},
		{
			MethodName: "EditDonation",
			Handler:    _DonationToRest_EditDonation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/donation_to_rest.proto",
}
